n
color
piece.color
s
n
s
display piece.valid_moves.length == 0
display piece
display row
n
display piece.valid_moves.length == 0
color
display piece
disable display 1
display row
display piece
s
n
display piece
display piece.valid_moves.length == 0
s
n
display (@board.all? do |row|
n
s
n
s
n
display piece.symbol == "#{"\u265A".encode('utf-8')}" && piece.color == :b
display [i, i2]
display piece
display row
s
n
s
n
display if piece.symbol == "#{"\u265A".encode('utf-8')}" && piece.color == :b
display [i, i2]
display piece
display row
color
s
n
s
n
c
n
display piece
n
display row
s
n
s
n
king_pos
n
display piece.symbol == "\u2654".encode('utf-8')
display piece.symbol == "#{"\u265A".encode('utf-8')}"
s
color
s
n
s
color
n
display [i, i2]
n
[i, i2]
i
s
color
display row
s
self.find_king_pos(color)
all_moves
n
color
s
self.in_check?(color)
n
display color
n
color
s
color
self.find_king_pos(color)
self.find_king_pos(color
n
color
n
N
n
display row
piece
display all_moves
s
n
s
self.in_check?(:b)
self.valid_moves
color
self.in_check?(color)
n
color
n
color
n
display arr
disable display 2
disable display 1
arr
s
n
display piece
s
n
display row
s
n
nn
n
s
n
self
elf
s
n
s
n
display piece
s
n
display row
s
n
color
n
s
n
new_arr
n
new_arr
n
new_arr
n
self
s
piece
n
piece
self
s
color
row[1].color
row[1]
n
row[0].color
row[0]
n
display row
display piece
n
color
n
s
row
s
n
@board
s
n
s
n
display piece
piece
s
n
self
s
n
self
s
self
n
self.board[x][y]
n
self.board[x][y]
self.board[a][b]
self
n
self.board[a][b]
self.board[x][y]
self
n
s
start_pos
end_pos
n
good_moves
n
self
where
n
s
@display
start_pos
end_pos
n
end_pos
n
good_moves
n
moves
n
self
s
n
moves
n
moves
n
self
n
self
s
self.forward_steps
n
new_arr
display self
s
n
s
n
disable display 3
display @pos
s
n
disable display 2
display self.moves
disable self.moves
disable display 1
display self
s
n
s
n
display move
display self
display Display.new(@board).render
s
n
s
n
display self.moves
display self
n
